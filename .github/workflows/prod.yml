name: Build, Test, and Deploy for Production

on: workflow_dispatch

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      SERVER_PORT: ${{ secrets.SERVER_PORT }}
      SERVER_SECRET: ${{ secrets.SERVER_SECRET }}
      SERVER_ACCESSTOKENEXPIREDURATION: ${{ secrets.SERVER_ACCESSTOKENEXPIREDURATION }}
      REQUEST_PER_SECOND: ${{ secrets.REQUEST_PER_SECOND }}
      TRUSTED_PROXIES: ${{ secrets.TRUSTED_PROXIES }}
      EXEMPT_FROM_THROTTLE: ${{ secrets.EXEMPT_FROM_THROTTLE }}
      APP_NAME: local
      APP_URL: http://localhost:8019
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_CONNECTION: ${{ secrets.DB_CONNECTION }}
      TIMEZONE: ${{ secrets.TIMEZONE }}
      SSLMODE: ${{ secrets.SSLMODE }}
      USERNAME: ${{ secrets.USERNAME }}
      PASSWORD: ${{ secrets.PASSWORD }}
      DB_NAME: ${{ secrets.DB_NAME }}
      MIGRATE: ${{secrets.MIGRATE }}
      IPSTACK_KEY: ${{ secrets.IPSTACK_KEY }}
      IPSTACK_BASE_URL: ${{ secrets.IPSTACK_BASE_URL }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Set Golang
        uses: actions/setup-go@v4
        with:
          go-version: "1.22.1"
      - name: Create app.env file
        run: |
          echo "SERVER_PORT=${{ env.SERVER_PORT }}" >> app.env
          echo "SERVER_SECRET=${{ env.SERVER_SECRET }}" >> app.env
          echo "SERVER_ACCESSTOKENEXPIREDURATION=${{ env.SERVER_ACCESSTOKENEXPIREDURATION }}" >> app.env
          echo "REQUEST_PER_SECOND=${{ env.REQUEST_PER_SECOND }}" >> app.env
          echo "TRUSTED_PROXIES=${{ env.TRUSTED_PROXIES }}" >> app.env
          echo "EXEMPT_FROM_THROTTLE=${{ env.EXEMPT_FROM_THROTTLE }}" >> app.env
          echo "APP_NAME=${{ env.APP_NAME }}" >> app.env
          echo "APP_URL=${{ env.APP_URL }}" >> app.env
          echo "DB_HOST=${{ env.DB_HOST }}" >> app.env
          echo "DB_PORT=${{ env.DB_PORT }}" >> app.env
          echo "DB_CONNECTION=${{ env.DB_CONNECTION }}" >> app.env
          echo "TIMEZONE=${{ env.TIMEZONE }}" >> app.env
          echo "SSLMODE=${{ env.SSLMODE }}" >> app.env
          echo "USERNAME=${{ env.USERNAME }}" >> app.env
          echo "PASSWORD=${{ env.PASSWORD }}" >> app.env
          echo "DB_NAME=${{ env.DB_NAME }}" >> app.env
          echo "MIGRATE=${{ env.MIGRATE }}" >> app.env
          echo "IPSTACK_KEY=${{ env.IPSTACK_KEY }}" >> app.env
          echo "IPSTACK_BASE_URL=${{ env.IPSTACK_BASE_URL }}" >> app.env
      - name: Build the application
        run: go build -o learnai_prod
      - name: Upload Binary
        uses: actions/upload-artifact@v3
        with:
          name: learnai_prod_app_env_artifacts
          path: |
            learnai_prod
            app.env
      
  test:
    runs-on: ubuntu-latest
    needs: build
    env:
      TEST_DB_HOST: localhost
      TEST_DB_PORT: 5432
      TEST_DB_CONNECTION: pgsql
      TEST_TIMEZONE: Africa/Lagos
      TEST_SSLMODE: disable
      TEST_USERNAME: postgres
      TEST_PASSWORD: password
      TEST_DB_NAME: db_name
      TEST_MIGRATE: true
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ env.TEST_USERNAME }}
          POSTGRES_PASSWORD: ${{ env.TEST_PASSWORD }}
          POSTGRES_DB: ${{ env.TEST_DB_NAME }}
        ports:
          - 5432:5432
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Download learnai_prod artifact
        uses: actions/download-artifact@v3
        with:
          name: learnai_prod_app_env_artifacts
      # - name: Create the app config file
      #   run: cp app-sample.env app.env
      - name: Run The Project
        run: nohup go run main.go > /dev/null 2>&1 &
      - name: Wait for application to start
        run: sleep 30s
      - name: Test for reachability
        run: curl http://localhost:8019
      - name: Run All Tests
        run: go test ./... -timeout 99999s

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: test
  #   env:
  #     USERNAME: ${{ secrets.SSH_USERNAME }}
  #     HOST: ${{ secrets.HOST }}
  #     PORT: ${{ secrets.PORT }}
  #     KEY: ${{ secrets.KEY }}
  #     PROCESS_NAME: run_learnai_prod

  #   steps:
  #     - name: Download learnai_prod artifact
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: learnai_prod
  #     - name: Make binary executable
  #       run: chmod +x learnai_prod

  #     - name: Copy learnai_prod to server
  #       uses: appleboy/scp-action@v0.1.4
  #       with:
  #         host: ${{ env.HOST }}
  #         username: ${{ env.USERNAME }}
  #         key: ${{ env.KEY }}
  #         port: ${{ env.PORT }}
  #         source: "learnai_prod"
  #         target: "/home/${{ env.USERNAME }}/boilerplate-fakes/"

  #     - name: SSH into server and deploy
  #       uses: appleboy/ssh-action@v1.0.3
  #       with:
  #         host: ${{ env.HOST }}
  #         username: ${{ env.USERNAME }}
  #         key: ${{ env.KEY}}
  #         port: ${{ env.PORT }}
  #         script: |
  #           git clone https://github.com/ekedonald/boilerplate-fakes.git
  #           cd boilerplate-fakes
  #           sudo chmod +x old_main.sh
  #           sudo ./old_main.sh
  #           cp app-sample.env app.env
  #           nohup go run main.go > /dev/null 2>&1 &
  #           sleep 30s
  #           curl http://localhost:8019